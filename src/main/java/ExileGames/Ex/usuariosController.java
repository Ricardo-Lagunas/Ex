package ExileGames.Ex;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/usuarios") // This means URL's start with /demo (after Application path)
public class usuariosController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private usuariosRepositorio usuariosRepositorio;


    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUserio (
            @RequestParam String nombre,
            @RequestParam String apellido,
            @RequestParam String correo,
            @RequestParam String contrasena,
            @RequestParam String fechanac,
            @RequestParam Integer rol)
    {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        usuarios n = new usuarios();
        n.setNombre(nombre);
        n.setApellido(apellido);
        n.setCorreo(correo);
        n.setContrasena(contrasena);
        n.setFechanac(fechanac);
        n.setRol(rol);
        usuariosRepositorio.save(n);
        return "Se guardaron los datos";
    }

//    @PostMapping("/add")//localhost:8080/usuario/add
//    public void guardar(@RequestBody usuarios usuarios){
//
//        usuariosRepositorio.save(usuarios);
//    }



    @GetMapping(path="/all")
    public @ResponseBody Iterable<usuarios> getAllUsers() {
        // This returns a JSON or XML with the users
        return usuariosRepositorio.findAll();
    }

    @DeleteMapping(path="/del/{id}")
    public @ResponseBody void deleteUser(@PathVariable int id){
        usuariosRepositorio.deleteById(id);

    }



    @GetMapping(path="/get/{id}")
    public @ResponseBody Iterable<usuarios> findUser(@PathVariable int id) {
        List<Integer> ids = new ArrayList<>();
        ids.add(id);
        return usuariosRepositorio.findAllById(ids);
    }


//    @PutMapping(path = "/up/{id}")
//    public @ResponseBody
//    void updateUsuario(@PathVariable int idusuarios,
//                       @RequestParam String nombre,
//                       @RequestParam String apellido,
//                       @RequestParam String correo,
//                       @RequestParam String contrasena,
//                       @RequestParam String fechanac,
//                       @RequestParam Integer rol)
//    {
//        usuarios usuarios = new usuarios();
//        usuarios.setIdusuarios(idusuarios);
//        usuarios.setNombre(nombre);
//        usuarios.setApellido(apellido);
//        usuarios.setCorreo(correo);
//        usuarios.setContrasena(contrasena);
//        usuarios.setFechanac(fechanac);
//        usuarios.setRol(rol);
//        usuariosRepositorio.save(usuarios);
//    }

    @PutMapping ("/actualizar")
    public void actualizar(@RequestBody usuarios usuarios){
        usuariosRepositorio.save(usuarios);
    }

}

